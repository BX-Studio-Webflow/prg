{"version":3,"file":"slider.js","sources":["../src/slider.ts"],"sourcesContent":["import type { JobsResponse } from \"../../types/jobs\";\nconst BASE_URL = \"https://prg-one.vercel.app\";\ndocument.addEventListener(\"DOMContentLoaded\", async () => {\n  const sliderWrap = document.querySelector<HTMLDivElement>(\n    `[dev-target=slide-wrap]`\n  );\n\n  if (!sliderWrap) {\n    return console.error(\"Missing element sliderWrap\");\n  }\n\n  try {\n    const jobs = await getAllJobs();\n    console.log({ jobs });\n    initSlider({ jobs, sliderWrap, limit: 10 });\n  } catch (error) {\n    console.error(\"Something went wrong\", error);\n  }\n\n  function initSlider({\n    jobs,\n    sliderWrap,\n    limit,\n  }: {\n    jobs: JobsResponse;\n    sliderWrap: HTMLDivElement;\n    limit: number;\n  }) {\n    const slideTemplate = sliderWrap.querySelector<HTMLLinkElement>(\n      `[dev-target=slide-link]`\n    );\n    sliderWrap.innerHTML = \"\";\n\n    if (!slideTemplate) {\n      return console.error(\"Missing element slideTemplate\");\n    }\n\n    jobs.data.slice(0, limit).forEach((job) => {\n      const slide = slideTemplate.cloneNode(true) as HTMLLinkElement;\n      slide.href = `/internal-jobs-final?id=${job.id}`;\n      const titleDiv = slide.querySelector(`[dev-target=title]`);\n      const customTextDiv = slide.querySelector(`[dev-target=custom-text-2]`);\n      const stateDiv = slide.querySelector(`[dev-target=state]`);\n\n      if (!titleDiv || !customTextDiv || !stateDiv) {\n        return console.error(\"Missing element in slide\");\n      }\n      titleDiv.textContent = job.title;\n      customTextDiv.textContent = job.customText2 ?? \"\";\n      stateDiv.textContent = `${job.address.city ?? \"\"}${\n        job.address.city && job.address.state && \" / \"\n      }${job.address.state ?? \"\"}`;\n      sliderWrap.appendChild(slide);\n    });\n  }\n\n  async function getAllJobs() {\n    try {\n      const response = await fetch(`${BASE_URL}/api/jobs`);\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch jobs\");\n      }\n      const jobs: JobsResponse = await response.json();\n      return jobs;\n    } catch (error) {\n      console.error(\"Error fetching jobs:\", error);\n      throw error;\n    }\n  }\n});\n"],"names":["BASE_URL","sliderWrap","jobs","getAllJobs","initSlider","error","limit","slideTemplate","job","slide","titleDiv","customTextDiv","stateDiv","response"],"mappings":"AACA,MAAMA,EAAW,6BACjB,SAAS,iBAAiB,mBAAoB,SAAY,CACxD,MAAMC,EAAa,SAAS,cAC1B,yBACF,EAEA,GAAI,CAACA,EACI,OAAA,QAAQ,MAAM,4BAA4B,EAG/C,GAAA,CACI,MAAAC,EAAO,MAAMC,EAAW,EACtB,QAAA,IAAI,CAAE,KAAAD,EAAM,EACpBE,EAAW,CAAE,KAAAF,EAAM,WAAAD,EAAY,MAAO,GAAI,QACnCI,EAAO,CACN,QAAA,MAAM,uBAAwBA,CAAK,CAAA,CAG7C,SAASD,EAAW,CAClB,KAAAF,EACA,WAAAD,EACA,MAAAK,CAAA,EAKC,CACD,MAAMC,EAAgBN,EAAW,cAC/B,yBACF,EAGA,GAFAA,EAAW,UAAY,GAEnB,CAACM,EACI,OAAA,QAAQ,MAAM,+BAA+B,EAGtDL,EAAK,KAAK,MAAM,EAAGI,CAAK,EAAE,QAASE,GAAQ,CACnC,MAAAC,EAAQF,EAAc,UAAU,EAAI,EACpCE,EAAA,KAAO,2BAA2BD,EAAI,EAAE,GACxC,MAAAE,EAAWD,EAAM,cAAc,oBAAoB,EACnDE,EAAgBF,EAAM,cAAc,4BAA4B,EAChEG,EAAWH,EAAM,cAAc,oBAAoB,EAEzD,GAAI,CAACC,GAAY,CAACC,GAAiB,CAACC,EAC3B,OAAA,QAAQ,MAAM,0BAA0B,EAEjDF,EAAS,YAAcF,EAAI,MACbG,EAAA,YAAcH,EAAI,aAAe,GAC/CI,EAAS,YAAc,GAAGJ,EAAI,QAAQ,MAAQ,EAAE,GAC9CA,EAAI,QAAQ,MAAQA,EAAI,QAAQ,OAAS,KAC3C,GAAGA,EAAI,QAAQ,OAAS,EAAE,GAC1BP,EAAW,YAAYQ,CAAK,CAAA,CAC7B,CAAA,CAGH,eAAeN,GAAa,CACtB,GAAA,CACF,MAAMU,EAAW,MAAM,MAAM,GAAGb,CAAQ,WAAW,EAC/C,GAAA,CAACa,EAAS,GACN,MAAA,IAAI,MAAM,sBAAsB,EAGjC,OADoB,MAAMA,EAAS,KAAK,QAExCR,EAAO,CACN,cAAA,MAAM,uBAAwBA,CAAK,EACrCA,CAAA,CACR,CAEJ,CAAC"}